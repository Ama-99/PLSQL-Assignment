CREATE OR REPLACE PACKAGE BODY AMA_BRANCH_API AS
  PROCEDURE INSERT_BRANCH(Branch_Name_              IN VARCHAR2,
                          Branch_Address_           IN VARCHAR2,
                          Branch_Manager_           IN VARCHAR2,
                          Total_Warehouse_capacity_ IN NUMBER,
                          Company_Reg_No_           IN NUMBER) IS
    Branch_Id_ NUMBER;
  BEGIN
    SELECT BRANCH_SEQ.NEXTVAL INTO Branch_Id_ FROM DUAL;
    INSERT INTO AMA_BRANCH_TAB
      (Branch_Id,
       Branch_Name,
       Branch_Address,
       Branch_Manager,
       Total_Warehouse_capacity,
       Company_Reg_No)
    VALUES
      (Branch_Id_,
       Branch_Name_,
       Branch_Address_,
       Branch_Manager_,
       Total_Warehouse_capacity_,
       Company_Reg_No_);
  END INSERT_BRANCH;

  --Get Branch Name
  FUNCTION GET_BRANCH_NAME(Branch_Id_ IN NUMBER) RETURN VARCHAR2 IS
    result_ VARCHAR2(200);
  
    CURSOR get_branch_name IS
      SELECT Branch_Name FROM AMA_BRANCH_TAB WHERE Branch_Id = Branch_Id_;
  BEGIN
    OPEN get_branch_name;
    FETCH get_branch_name
      INTO result_;
    CLOSE get_branch_name;
  
    RETURN result_;
  
  END GET_BRANCH_NAME;

  --Get Branch address
  FUNCTION GET_BRANCH_ADDRESS(Branch_Id_ IN NUMBER) RETURN VARCHAR2 IS
    result_ VARCHAR2(4000);
  
    CURSOR get_branch_address IS
      SELECT Branch_Address
        FROM AMA_BRANCH_TAB
       WHERE Branch_Id = Branch_Id_;
  BEGIN
    OPEN get_branch_address;
    FETCH get_branch_address
      INTO result_;
    CLOSE get_branch_address;
  
    RETURN result_;
  
  END GET_BRANCH_ADDRESS;

  --Get Branch Manager
  FUNCTION GET_BRANCH_MANAGER(Branch_Id_ IN NUMBER) RETURN VARCHAR2 IS
    result_ VARCHAR2(4000);
  
    CURSOR get_branch_manager IS
      SELECT Branch_Address
        FROM AMA_BRANCH_TAB
       WHERE Branch_Id = Branch_Id_;
  BEGIN
    OPEN get_branch_manager;
    FETCH get_branch_manager
      INTO result_;
    CLOSE get_branch_manager;
  
    RETURN result_;
  
  END GET_BRANCH_MANAGER;

  --Get Total Warehouse Capacity
  FUNCTION GET_TOTAL_WAREHOUSE_CAPACITY(Branch_Id_ IN NUMBER) RETURN NUMBER IS
    result_ NUMBER;
  
    CURSOR get_capacity IS
      SELECT Total_Warehouse_Capacity
        FROM AMA_BRANCH_TAB
       WHERE Branch_Id = Branch_Id_;
  BEGIN
    OPEN get_capacity;
    FETCH get_capacity
      INTO result_;
    CLOSE get_capacity;
  
    RETURN result_;
  
  END GET_TOTAL_WAREHOUSE_CAPACITY;

  --GET REMAINING CAPACITY
  FUNCTION GET_REMAINING_CAPACITY(Branch_Id_ IN NUMBER) RETURN NUMBER IS
    result_ NUMBER;
  
  BEGIN
    SELECT ((SELECT Total_Warehouse_Capacity
               FROM AMA_BRANCH_TAB
              WHERE Branch_Id = Branch_Id_) -
           COALESCE((SELECT SUM(Max_Volume)
                       FROM AMA_CONTAINER_TAB
                      WHERE Container_Id IN
                            (SELECT Container_Id
                               FROM AMA_STORAGE_TAB
                              WHERE Status = 'Active' AND
                                    Branch_Id = Branch_Id_)),
                     0))
      INTO result_
      FROM dual;
  
    RETURN result_;
  
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN NULL;
    
  END GET_REMAINING_CAPACITY;

  -- get current inventory info
  PROCEDURE GET_CURRENT_INV_INFO(Branch_Id_ IN NUMBER) IS
    available_qty_ NUMBER;
    item_id_       NUMBER;
  BEGIN
    FOR inv_info_rec IN (SELECT Available_Qty_KG, Item_Id
                           FROM AMA_ITEMS_TAB
                          WHERE Item_Id IN
                                (SELECT Item_Id
                                   FROM AMA_BRANCH_TAB
                                  WHERE Branch_Id = Branch_Id_)) LOOP
      -- Display information for each record
      available_qty_ := inv_info_rec.Available_Qty_KG;
      item_id_       := inv_info_rec.Item_Id;
    
      dbms_output.put_line('Available Quantity: ' || available_qty_ ||
                           ', Item ID: ' || item_id_);
    END LOOP;
  
  END GET_CURRENT_INV_INFO;

  -- To update record
  PROCEDURE update_record(Branch_Id_                    IN NUMBER,
                          New_Branch_Name_              IN VARCHAR2,
                          New_Branch_Address_           IN VARCHAR2,
                          New_Branch_Manager_           IN VARCHAR2,
                          New_Total_Warehouse_Capacity_ IN NUMBER,
                          New_Company_Reg_No_           IN NUMBER) IS
  BEGIN
    UPDATE AMA_BRANCH_TAB
       SET Branch_Name              = New_Branch_Name_,
           Branch_Address           = New_Branch_Address_,
           Branch_Manager           = New_Branch_Manager_,
           Total_Warehouse_Capacity = New_Total_Warehouse_Capacity_,
           Company_Reg_No           = New_Company_Reg_No_
    
     WHERE Branch_Id = Branch_Id_;
  END update_record;

  -- To delete record
  PROCEDURE delete_record(Branch_Id_ IN NUMBER) IS
  BEGIN
    DELETE FROM AMA_BRANCH_TAB WHERE Branch_Id = Branch_Id_;
  END delete_record;

END AMA_BRANCH_API;
/